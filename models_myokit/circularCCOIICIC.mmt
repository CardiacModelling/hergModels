[[model]]
name: circularCCOIICIC
author: Sanmitra Ghosh
desc: Kylie's model as imported from the Mex file
# Initial values
ikr.y1 = 1 #C2
ikr.y2 = 0 #IC2
ikr.y3 = 0 #IC1
ikr.y4 = 0 #C1
ikr.y5 = 0 #O

#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
V = engine.pace
    desc: membane potential
    in [mV]

[nernst]
EK = -85 [mV]

#
# Model from Kylie's mex file (HH)
#
[ikr]
use membrane.V
IKr = p13 * y3 * (V - nernst.EK)
y6 = 1 - (y1 + y2 + y3 + y4 + y5)
k12 = p1 * exp( p2 * V)
k21 = p3 * exp(-p4 * V)
k34 = p5 * exp( p6 * V)
k43 = p7 * exp(-p8 * V)
k56 = p9 * exp( p10 * V)
k65 = p11 * exp(-p12 * V)

dot(y1) = -k56 * y1 + k65 * y4  + k43 *y2 - k34 * y1
dot(y2) = -k56 * y2 + k65 * y3 + k34 * y1 - k43 * y2
dot(y3) = -k12 * y3 + k21 * y6 + k56 * y2 - k65 * y3
dot(y4) = -k12 * y4 + k21 * y5 + k56 * y1 - k65 * y4
dot(y5) = -k34 * y5 + k43 * y6 + k12 * y4 - k21 * y5

p1 = 2.26e-4 [1/ms]
p2 = 0.06990 [1/mV]
p3 = 3.45e-5 [1/ms]
p4 = 0.05462 [1/mV]
p5 = 0.08730 [1/ms]
p6 = 8.91e-3 [1/mV]
p7 = 5.15e-3 [1/ms]
p8 = 0.03158 [1/mV]
p9 = 0.08730 [1/ms]
p10 = 8.91e-3 [1/mV]
p11 = 5.15e-3 [1/ms]
p12 = 0.03158 [1/mV]
p13 = 0.15240 [mS/uF]


[[script]]
import myokit
import myokit.pacing as pacing
import numpy as np
import matplotlib
import matplotlib.pyplot as pl

#
# Simple IKr test script
#

# Get model
m = get_model()

# Create pacing protocol
v = np.arange(-100, 50 + 10, 10)
p = pacing.steptrain(
        vsteps=v,
        vhold=-80,
        tpre=2000,
        tstep=5000,
        tpost=3000)

# Run simulation
s = myokit.Simulation(m, p)
d = s.run(p.characteristic_time())

# Create colormap for plotting
cmap = matplotlib.cm.get_cmap('viridis')
norm = matplotlib.colors.Normalize(0, len(v))

# Plot data as overlapping steps
d2 = d.npview()
d2 = d2.regularize(0.5)
d2 = d2.fold(10000)
pl.figure()
for k in xrange(len(v)):
    pl.subplot(2,1,1)
    pl.plot(d2.time(), d2['membrane.V', k], color=cmap(norm(k)))
    pl.subplot(2,1,2)
    pl.plot(d2.time(), d2['ikr.IKr', k], color=cmap(norm(k)))
pl.show()

